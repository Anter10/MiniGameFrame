{"version":3,"sources":["WebSocket.js"],"names":["WebSocket","TAG","CONNECT_STATUS_OK","CONNECT_STATUS_OPENING","CONNECT_STATUS_CLOSING","CONNECT_STATUS_FAIL","connectStatus","isTimerInited","tickCount","filterCmds","timerSchedule","WXSdk","NotificationCenter","trigger","EventType","SEND_HEART_BEAT","reconnet","startCheckTimer","Timer","setTimer","cc","director","stopCheckTimer","cancelTimer","connect","url","BiLog","clickStat","clickStatEventType","clickStatEventTypeTCPStart","IsWechatPlatform","doWechatConnect","wx","connectSocket","onSocketOpen","res","LOGD","TCP_OPENED","clickStatEventTypeTCPSuccess","onSocketError","clickStatEventTypeTCPFailed","TCP_ERROR","onSocketClose","TCP_CLOSE","onSocketMessage","StateInfo","isOnForeground","content","decodeMessage","msgStr","unescape","replace","strJson","substr","length","_json","JSON","parse","indexOf","cmd","TCP_RECEIVE","err","LOGE","stringify","data","ArrayBuffer","databytes","Uint8Array","i","len","tmpc","String","fromCharCode","EncodeDecode","base64Decode","mask","slice","charcode","result","utf8Decode","TCP_RECONNECT","SystemInfo","webSocketUrl","sendMsg","sendSocketMessage","success","params","fail","errMsg","closeSocket","arguments","complete","close"],"mappings":";;;;;;AAAA;;;;AAIA,IAAIA,YAAY;AACZC,SAAK,YADO;AAEZC,uBAAmB,CAFP;AAGZC,4BAAwB,CAHZ;AAIZC,4BAAwB,CAJZ;AAKZC,yBAAqB,CALT;AAMZC,mBAAe,CANH;AAOZC,mBAAe,KAPH;AAQZC,eAAW,CARC;AASZC,gBAAY,CAAC,YAAD,CATA;;AAWZ;;;AAGAC,mBAAe,yBAAY;AACvBV,kBAAUQ,SAAV,GAAsB,CAACR,UAAUQ,SAAV,GAAsB,CAAvB,IAA4B,CAAlD;AACA,YAAIR,UAAUQ,SAAV,IAAuB,CAAvB,IAA4BR,UAAUM,aAAV,IAA2BN,UAAUE,iBAArE,EAAwF;AACpF;AACA;AACA;AACAS,kBAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgBC,eAAjD;AACH;;AAED;AACAf,kBAAUgB,QAAV;AACH,KAzBW;;AA2BZC,qBAAiB,2BAAY;AACzBjB,kBAAUO,aAAV,GAA0B,IAA1B;AACAI,cAAMO,KAAN,CAAYC,QAAZ,CAAqBC,GAAGC,QAAxB,EAAkC,KAAKX,aAAvC,EAAsD,CAAtD;AACH,KA9BW;;AAgCZY,oBAAgB,0BAAY;AACxBtB,kBAAUO,aAAV,GAA0B,KAA1B;AACAI,cAAMO,KAAN,CAAYK,WAAZ,CAAwBH,GAAGC,QAA3B,EAAqC,KAAKX,aAA1C;AACH,KAnCW;;AAqCZ;AACAc,aAAS,iBAAUC,GAAV,EAAe;AACpBd,cAAMe,KAAN,CAAYC,SAAZ,CAAsBhB,MAAMiB,kBAAN,CAAyBC,0BAA/C,EAA2E,CAACJ,GAAD,CAA3E;AACA,YAAIzB,UAAUM,aAAV,IAA2BN,UAAUG,sBAArC,IACAH,UAAUM,aAAV,IAA2BN,UAAUE,iBADzC,EAC4D;AACxD;AACH;;AAEDF,kBAAUM,aAAV,GAA0BN,UAAUG,sBAApC;AACA,YAAIQ,MAAMmB,gBAAN,EAAJ,EAA8B;AAC1B,iBAAKC,eAAL,CAAqBN,GAArB;AACH;AACJ,KAjDW;;AAmDZM,qBAAiB,yBAAUN,GAAV,EAAe;AAC5B,YAAI;AACA,gBAAI,CAACd,MAAMmB,gBAAN,EAAL,EAA+B;AAC3B;AACH;AACDE,eAAGC,aAAH,CAAiB;AACbR,qBAAKA;AADQ,aAAjB;;AAIAO,eAAGE,YAAH,CAAgB,UAAUC,GAAV,EAAe;AAC3BxB,sBAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,yBAA1B;AACAD,0BAAUM,aAAV,GAA0BN,UAAUE,iBAApC;;AAEAS,sBAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgBuB,UAAjD;AACA1B,sBAAMe,KAAN,CAAYC,SAAZ,CAAsBhB,MAAMiB,kBAAN,CAAyBU,4BAA/C,EAA6E,CAACb,GAAD,CAA7E;AACA,oBAAI,CAACzB,UAAUO,aAAf,EAA8B;AAC1B;AACAP,8BAAUiB,eAAV;AACH;AACJ,aAVD;;AAYAe,eAAGO,aAAH,CAAiB,UAAUJ,GAAV,EAAe;AAC5BxB,sBAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,wBAA1B;AACAU,sBAAMe,KAAN,CAAYC,SAAZ,CAAsBhB,MAAMiB,kBAAN,CAAyBY,2BAA/C,EAA4E,CAACf,GAAD,CAA5E;;AAEAzB,0BAAUM,aAAV,GAA0BN,UAAUK,mBAApC;AACAM,sBAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgB2B,SAAjD;AACH,aAND;;AASAT,eAAGU,aAAH,CAAiB,UAAUP,GAAV,EAAe;AAC5BxB,sBAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,gBAA1B;AACAD,0BAAUM,aAAV,GAA0BN,UAAUK,mBAApC;AACAM,sBAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgB6B,SAAjD;AACH,aAJD;;AAMAX,eAAGY,eAAH,CAAmB,UAAUT,GAAV,EAAe;AAC9B,oBAAI,CAACxB,MAAMkC,SAAN,CAAgBC,cAArB,EAAqC;AACjC;AACA;AACH;AACD;AACA,oBAAIC,UAAU/C,UAAUgD,aAAV,CAAwBb,IAAI,MAAJ,CAAxB,CAAd;AACA,oBAAIY,WAAW,IAAX,IAAmBA,WAAW,MAAlC,EAA0C;AACtC;AACH;;AAED,oBAAIE,SAAS,wBAAwBC,SAASH,QAAQI,OAAR,CAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAArC;AACA,oBAAIC,UAAUL,QAAQM,MAAR,CAAe,CAAf,EAAkBN,QAAQO,MAAR,GAAiB,CAAnC,CAAd;AACA,oBAAIF,WAAW,IAAX,IAAmBA,QAAQE,MAAR,GAAiB,CAAxC,EAA2C;AACvC,wBAAIC,QAAQC,KAAKC,KAAL,CAAWL,OAAX,CAAZ;AACA,wBAAIpD,UAAUS,UAAV,CAAqBiD,OAArB,CAA6BH,MAAMI,GAAnC,KAA2C,CAAC,CAAhD,EAAmD;AAC/ChD,8BAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0BgD,MAA1B;AACH;;AAEDtC,0BAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgB8C,WAAjD,EAA8DL,KAA9D;AACH;AAEJ,aAtBD;AAuBH,SA1DD,CA0DE,OAAOM,GAAP,EAAY;AACVlD,kBAAMmD,IAAN,CAAW,QAAX,EAAqB,gCAAgCN,KAAKO,SAAL,CAAeF,GAAf,CAArD;AACH;AACJ,KAjHW;;AAmHZb,mBAAe,uBAAUgB,IAAV,EAAgB;AAC3B,YAAI,OAAOC,WAAP,IAAsB,WAAtB,IAAqCD,gBAAgBC,WAAzD,EAAsE;AAClE,gBAAIC,YAAY,IAAIC,UAAJ,CAAeH,IAAf,CAAhB;AACA,gBAAIjB,UAAU,EAAd;AACA,iBAAK,IAAIqB,IAAI,CAAR,EAAWC,MAAMH,UAAUZ,MAAhC,EAAwCc,IAAIC,GAA5C,EAAiDD,GAAjD,EAAsD;AAClD,oBAAIE,OAAOC,OAAOC,YAAP,CAAoBN,UAAUE,CAAV,CAApB,CAAX;AACArB,2BAAWuB,IAAX;AACH;AACD,mBAAOvB,OAAP;AACH;AACD,YAAIiB,OAAOrD,MAAM8D,YAAN,CAAmBC,YAAnB,CAAgCV,IAAhC,CAAX;AACA,YAAIW,OAAOX,KAAKY,KAAL,CAAW,CAAX,EAAc,CAAd,CAAX;AACAZ,eAAOA,KAAKY,KAAL,CAAW,CAAX,CAAP;AACA,aAAK,IAAIR,IAAI,CAAR,EAAWC,MAAML,KAAKV,MAA3B,EAAmCc,IAAIC,GAAvC,EAA4CD,GAA5C,EAAiD;AAC7C,gBAAIS,WAAWb,KAAKI,CAAL,CAAf;AACAS,wBAAYF,KAAKP,IAAI,CAAT,CAAZ;AACAJ,iBAAKI,CAAL,IAAUS,QAAV;AACH;AACD,YAAIC,SAASnE,MAAM8D,YAAN,CAAmBM,UAAnB,CAA8Bf,IAA9B,CAAb;AACA,eAAOc,MAAP;AACH,KAvIW;;AAyIZ9D,cAAU,oBAAY;AAClB,YAAI,CAACL,MAAMkC,SAAN,CAAgBC,cAArB,EAAqC;AACjC;AACA;AACH;AACD,YAAI9C,UAAUM,aAAV,IAA2BN,UAAUK,mBAAzC,EAA8D;AAC1DM,kBAAMC,kBAAN,CAAyBC,OAAzB,CAAiCF,MAAMG,SAAN,CAAgBkE,aAAjD;AACAhF,sBAAUwB,OAAV,CAAkBb,MAAMsE,UAAN,CAAiBC,YAAnC;AACH;AACJ,KAlJW;;AAoJZC,aAAS,iBAAUnB,IAAV,EAAgB;AACrB,YAAI;AACA,gBAAIhE,UAAUM,aAAV,IAA2BN,UAAUE,iBAAzC,EAA4D;AACxD;AACH;;AAED,gBAAI+C,SAASO,KAAKO,SAAL,CAAeC,IAAf,CAAb;AACA,gBAAIhE,UAAUS,UAAV,CAAqBiD,OAArB,CAA6BM,KAAKL,GAAlC,KAA0C,CAAC,CAA/C,EAAkD;AAC9ChD,sBAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,iBAAiBgD,MAA3C;AACH;;AAED,gBAAItC,MAAMmB,gBAAN,EAAJ,EAA8B;AAC1BE,mBAAGoD,iBAAH,CAAqB;AACjBpB,0BAAMf,MADW;AAEjBoC,6BAAS,iBAAUC,MAAV,EAAkB;AACvB3E,8BAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,yBAAyBuD,KAAKO,SAAL,CAAeuB,MAAf,CAAnD;AACH,qBAJgB;;AAMjBC,0BAAM,cAAUD,MAAV,EAAkB;AACpB,4BAAIE,SAASF,OAAO,CAAP,CAAb;AACA,4BAAIE,UAAUA,OAAO,QAAP,MAAqB,yCAAnC,EAA8E;AAC1ExD,+BAAGyD,WAAH;AACAzF,sCAAUM,aAAV,GAA0BN,UAAUK,mBAApC;AACH;AACDM,8BAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,sBAAsBuD,KAAKO,SAAL,CAAe2B,SAAf,CAAhD;AACH,qBAbgB;;AAejBC,8BAAU,kBAAUL,MAAV,EAAkB,CAAE;AAfb,iBAArB;AAiBH;AACJ,SA7BD,CA6BE,OAAOzB,GAAP,EAAY;AACVlD,kBAAMmD,IAAN,CAAW,QAAX,EAAqB,wBAAwBN,KAAKO,SAAL,CAAeF,GAAf,CAA7C;AACH;AACJ,KArLW;;AAuLZ+B,WAAO,iBAAY;AACf,YAAI;AACA5F,sBAAUM,aAAV,GAA0BN,UAAUI,sBAApC;AACA,gBAAIO,MAAMmB,gBAAN,EAAJ,EAA8B;AAC1BE,mBAAGyD,WAAH;AACH;AACDzF,sBAAUsB,cAAV;AACAX,kBAAMyB,IAAN,CAAWpC,UAAUC,GAArB,EAA0B,yBAA1B;AACH,SAPD,CAOE,OAAO4D,GAAP,EAAY;AACVlD,kBAAMmD,IAAN,CAAW,QAAX,EAAqB,sBAAsBN,KAAKO,SAAL,CAAeF,GAAf,CAA3C;AACH;AACJ;AAlMW,CAAhB","file":"WebSocket.js","sourceRoot":"../../../../assets/WXFrame","sourcesContent":["/**\n * 微信小程序下TCP长连接使用websocket实现\n */\n\nvar WebSocket = {\n    TAG: \"TCP client\",\n    CONNECT_STATUS_OK: 1,\n    CONNECT_STATUS_OPENING: 2,\n    CONNECT_STATUS_CLOSING: 3,\n    CONNECT_STATUS_FAIL: 0,\n    connectStatus: 0,\n    isTimerInited: false,\n    tickCount: 0,\n    filterCmds: ['heart_beat'],\n\n    /**\n     * 该方法包含了心跳和tcp状态检查两项功能,结合connect中的逻辑,是一个无限重试的机制\n     */\n    timerSchedule: function () {\n        WebSocket.tickCount = (WebSocket.tickCount + 1) % 3;\n        if (WebSocket.tickCount == 2 && WebSocket.connectStatus == WebSocket.CONNECT_STATUS_OK) {\n            //每3秒发送心跳\n            //hall.MsgFactory.sendHeartBeat();\n            //监听者进行具体的协议实现\n            WXSdk.NotificationCenter.trigger(WXSdk.EventType.SEND_HEART_BEAT);\n        }\n\n        // 每1秒检查一下长连接，如果不通，则重连。\n        WebSocket.reconnet();\n    },\n\n    startCheckTimer: function () {\n        WebSocket.isTimerInited = true;\n        WXSdk.Timer.setTimer(cc.director, this.timerSchedule, 1);\n    },\n\n    stopCheckTimer: function () {\n        WebSocket.isTimerInited = false;\n        WXSdk.Timer.cancelTimer(cc.director, this.timerSchedule);\n    },\n\n    //以下为websocket连接相关方法\n    connect: function (url) {\n        WXSdk.BiLog.clickStat(WXSdk.clickStatEventType.clickStatEventTypeTCPStart, [url]);\n        if (WebSocket.connectStatus == WebSocket.CONNECT_STATUS_OPENING ||\n            WebSocket.connectStatus == WebSocket.CONNECT_STATUS_OK) {\n            return;\n        }\n\n        WebSocket.connectStatus = WebSocket.CONNECT_STATUS_OPENING;\n        if (WXSdk.IsWechatPlatform()) {\n            this.doWechatConnect(url);\n        }\n    },\n\n    doWechatConnect: function (url) {\n        try {\n            if (!WXSdk.IsWechatPlatform()) {\n                return;\n            }\n            wx.connectSocket({\n                url: url\n            });\n\n            wx.onSocketOpen(function (res) {\n                WXSdk.LOGD(WebSocket.TAG, 'TCP webSocket opened...');\n                WebSocket.connectStatus = WebSocket.CONNECT_STATUS_OK;\n\n                WXSdk.NotificationCenter.trigger(WXSdk.EventType.TCP_OPENED);\n                WXSdk.BiLog.clickStat(WXSdk.clickStatEventType.clickStatEventTypeTCPSuccess, [url]);\n                if (!WebSocket.isTimerInited) {\n                    //启动TCP的定时检查机制,成功连接1次后将永久进行检查\n                    WebSocket.startCheckTimer();\n                }\n            });\n\n            wx.onSocketError(function (res) {\n                WXSdk.LOGD(WebSocket.TAG, 'TCP webSocket error...');\n                WXSdk.BiLog.clickStat(WXSdk.clickStatEventType.clickStatEventTypeTCPFailed, [url]);\n\n                WebSocket.connectStatus = WebSocket.CONNECT_STATUS_FAIL;\n                WXSdk.NotificationCenter.trigger(WXSdk.EventType.TCP_ERROR);\n            });\n\n\n            wx.onSocketClose(function (res) {\n                WXSdk.LOGD(WebSocket.TAG, 'WebSocket 已关闭！');\n                WebSocket.connectStatus = WebSocket.CONNECT_STATUS_FAIL;\n                WXSdk.NotificationCenter.trigger(WXSdk.EventType.TCP_CLOSE);\n            });\n\n            wx.onSocketMessage(function (res) {\n                if (!WXSdk.StateInfo.isOnForeground) {\n                    //在后台不处理消息\n                    return;\n                }\n                // 处理长连接的消息\n                var content = WebSocket.decodeMessage(res[\"data\"]);\n                if (content == null || content == '0000') {\n                    return;\n                }\n\n                var msgStr = \"[Receive TCP Msg]: \" + unescape(content.replace(/\\\\u/gi, '%u'));\n                var strJson = content.substr(0, content.length - 0);\n                if (strJson != null && strJson.length > 0) {\n                    var _json = JSON.parse(strJson);\n                    if (WebSocket.filterCmds.indexOf(_json.cmd) == -1) {\n                        WXSdk.LOGD(WebSocket.TAG, msgStr);\n                    }\n\n                    WXSdk.NotificationCenter.trigger(WXSdk.EventType.TCP_RECEIVE, _json);\n                }\n\n            });\n        } catch (err) {\n            WXSdk.LOGE(\"error:\", \"WebSocket.doWechatConnect——\" + JSON.stringify(err));\n        }\n    },\n\n    decodeMessage: function (data) {\n        if (typeof ArrayBuffer != 'undefined' && data instanceof ArrayBuffer) {\n            var databytes = new Uint8Array(data);\n            var content = ''\n            for (var i = 0, len = databytes.length; i < len; i++) {\n                var tmpc = String.fromCharCode(databytes[i]);\n                content += tmpc;\n            }\n            return content;\n        }\n        var data = WXSdk.EncodeDecode.base64Decode(data);\n        var mask = data.slice(0, 4);\n        data = data.slice(4);\n        for (var i = 0, len = data.length; i < len; i++) {\n            var charcode = data[i];\n            charcode ^= mask[i % 4];\n            data[i] = charcode;\n        }\n        var result = WXSdk.EncodeDecode.utf8Decode(data);\n        return result;\n    },\n\n    reconnet: function () {\n        if (!WXSdk.StateInfo.isOnForeground) {\n            //在后台不重连(IOS会出问题)\n            return;\n        }\n        if (WebSocket.connectStatus == WebSocket.CONNECT_STATUS_FAIL) {\n            WXSdk.NotificationCenter.trigger(WXSdk.EventType.TCP_RECONNECT);\n            WebSocket.connect(WXSdk.SystemInfo.webSocketUrl);\n        }\n    },\n\n    sendMsg: function (data) {\n        try {\n            if (WebSocket.connectStatus != WebSocket.CONNECT_STATUS_OK) {\n                return;\n            }\n\n            var msgStr = JSON.stringify(data);\n            if (WebSocket.filterCmds.indexOf(data.cmd) == -1) {\n                WXSdk.LOGD(WebSocket.TAG, 'TCP sendMsg:' + msgStr);\n            }\n\n            if (WXSdk.IsWechatPlatform()) {\n                wx.sendSocketMessage({\n                    data: msgStr,\n                    success: function (params) {\n                        WXSdk.LOGD(WebSocket.TAG, 'TCP sendMsg success:' + JSON.stringify(params));\n                    },\n\n                    fail: function (params) {\n                        var errMsg = params[0];\n                        if (errMsg && errMsg['errMsg'] === 'sendSocketMessage:fail taskID not exist') {\n                            wx.closeSocket();\n                            WebSocket.connectStatus = WebSocket.CONNECT_STATUS_FAIL;\n                        }\n                        WXSdk.LOGD(WebSocket.TAG, 'TCP sendMsg fail:' + JSON.stringify(arguments));\n                    },\n\n                    complete: function (params) {}\n                });\n            }\n        } catch (err) {\n            WXSdk.LOGE(\"error:\", \"WebSocket.sendMsg——\" + JSON.stringify(err));\n        }\n    },\n\n    close: function () {\n        try {\n            WebSocket.connectStatus = WebSocket.CONNECT_STATUS_CLOSING;\n            if (WXSdk.IsWechatPlatform()) {\n                wx.closeSocket();\n            }\n            WebSocket.stopCheckTimer();\n            WXSdk.LOGD(WebSocket.TAG, 'TCP close..............');\n        } catch (err) {\n            WXSdk.LOGE(\"error:\", \"WebSocket.close——\" + JSON.stringify(err));\n        }\n    }\n};\n"]}